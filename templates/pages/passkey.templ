package pages

import "github.com/pynezz/pynezz_com/templates/layout"

const formDiv = "flex flex-col justify-content space-between align-items-center bg-bg self-center text-txt p-4 pr-9 pl-9 max-w-50 border border-surface rounded-4 m-0-auto flex-shrink-1 mt-8"

templ Passkey() {
	<section class={ "section", formDiv }>
		<h1 class={ "h1", layout.Title }>Passkey</h1>
		<div class="container flex justify-center items-center vh-100">
			<div class="bg-base p-5 rounded-lg border-crust border-2 w-50 h-max">
				<h1 class="mb-4 text-center">ðŸ”‘ Passkey</h1>
				<div class="text-left text-wrap" id="message">
					<span id="elem-error"></span>
					<span id="elem-success"></span>
				</div>
				<div class="mb-3 flex flex-col w-full gap-2">
					<input type="text" class="focus:outline-none bg-crust rounded-md p-2" id="username" placeholder="username"/>
					<input type="text" class="focus:outline-none bg-crust rounded-md p-2" id="displayname" placeholder="display name"/>
				</div>
				<div class="flex flex-col w-full">
					<div class="rounded border-mantle gap-2">
						<button class="p-2 py-4 bg-surface2 w-full h-fit shadow-md focus:outline-none after:bg-mantle text-text active:bg-surface0 rounded-sm hover:bg-sky hover:text-surface2  " id="registerButton">Register</button>
						<button class="p-2 bg-surface2 w-full h-fit shadow-sm focus:outline-none aria-pressed:bg-mauve text-text active:bg-surface0 rounded-sm hover:bg-sky hover:text-surface2" id="loginButton">Login</button>
					</div>
				</div>
			</div>
		</div>
	</section>
	<script src="/static/js/webauthn.js"></script>
	@pkScript()
}

script pkScript() {

    const { startRegistration, startAuthentication } = SimpleWebAuthnBrowser;


    document.addEventListener("DOMContentLoaded", ready);

    let elemSuccess = null
    let elemError = null

    function ready() {
        elemSuccess = document.getElementById('elem-success');
        elemError = document.getElementById('elem-error');
        document.getElementById('registerButton').addEventListener('click', begin);
        document.getElementById('loginButton').addEventListener('click', authenticate);
    }

    function showMessage(message, isError = false) {
        const messageElement = document.getElementById('message');
        messageElement.textContent = message;
        messageElement.style.color = isError ? 'red' : 'green';
    }

    const begin = async () => {
        // Retrieve the username from the input field
        const username = document.getElementById('username').value;
        const displayname = document.getElementById('displayname').value;

        // Reset success/error messages
        elemSuccess.innerHTML = '';
        elemError.innerHTML = '';

        // GET registration options from the endpoint that calls
        // @simplewebauthn/server -> generateRegistrationOptions()
        const resp = await fetch('/api/passkey/generate-registration-options');

        let attResp;
        try {
            // Pass the options to the authenticator and wait for a response
            attResp = await startRegistration(await resp.json());
            } catch (error) {
            // Some basic error handling
            if (error.name === 'InvalidStateError') {
                elemError.innerText = 'Error: Authenticator was probably already registered by user';
            } else {
                elemError.innerText = error;
            }
            throw error;
        }

        // POST the response to the endpoint that calls
        // @simplewebauthn/server -> verifyRegistrationResponse()
        const verificationResp = await fetch('/api/verify-registration', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(attResp),
        });

        // Wait for the results of verification
        const verificationJSON = await verificationResp.json();

        // Show UI appropriate for the `verified` status
        if (verificationJSON && verificationJSON.verified) {
            elemSuccess.innerHTML = 'Success!';
        } else {
            elemError.innerHTML = `Oh no, something went wrong! Response: <pre>${JSON.stringify(
                verificationJSON,
            )}</pre>`;

        }
    }

    const authenticate = async () => {
        // <button>
        const elemBegin = document.getElementById('btnBegin');
        // <span>/<p>/etc...
        const elemSuccess = document.getElementById('elem-success');
        // <span>/<p>/etc...
        const elemError = document.getElementById('elem-error');

        // Start authentication when the user clicks a button
        elemBegin.addEventListener('click', async () => {
            // Reset success/error messages
            elemSuccess.innerHTML = '';
            elemError.innerHTML = '';

            // GET authentication options from the endpoint that calls
            // @simplewebauthn/server -> generateAuthenticationOptions()
            const resp = await fetch('/api/passkey/generate-authentication-options');

            let asseResp;
            try {
            // Pass the options to the authenticator and wait for a response
            asseResp = await startAuthentication(await resp.json());
            } catch (error) {
            // Some basic error handling
            elemError.innerText = error;
            throw error;
            }

            // POST the response to the endpoint that calls
            // @simplewebauthn/server -> verifyAuthenticationResponse()
            const verificationResp = await fetch('/verify-authentication', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(asseResp),
            });

            // Wait for the results of verification
            const verificationJSON = await verificationResp.json();

            // Show UI appropriate for the `verified` status
            if (verificationJSON && verificationJSON.verified) {
            elemSuccess.innerHTML = 'Success!';
            } else {
            elemError.innerHTML = `Oh no, something went wrong! Response: <pre>${JSON.stringify(
                verificationJSON,
            )}</pre>`;
            }
        });
    }

    const register = async () => {
        // Retrieve the username from the input field
        const username = document.getElementById('username').value;
        const displayname = document.getElementById('displayname').value;

        try {
            // Get registration options from your server. Here, we also receive the challenge.
            const response = await fetch('/api/passkey/registerStart', {
                method: 'POST', headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({username: username, displayname: displayname})
            });
            console.log(response)

            // Check if the registration options are ok.
            if (!response.ok) {
                const msg = await response.json();
                throw new Error('User already exists or failed to get registration options from server: ' + msg);
            }

            // Convert the registration options to JSON.
            let options = await response.json();
            console.log(options)

            // Set
            options = {
                publicKey: {
                    ...options,
                    user: {
                        ...options.user,
                        id: Uint8Array.from(atob(options.user.id), c => c.charCodeAt(0))
                    }
                }
            };

            // Convert options to the appropriate format for WebAuthn API
            // options.publicKey.challenge = Uint8Array.from(atob(options.publicKey.challenge), c => c.charCodeAt(0));
            // options.publicKey.user.id = Uint8Array.from(atob(options.publicKey.user.id), c => c.charCodeAt(0));
            // if (options.publicKey.excludeCredentials) {
            //     for (let cred of options.publicKey.excludeCredentials) {
            //         cred.id = Uint8Array.from(atob(cred.id), c => c.charCodeAt(0));
            //     }
            // }
            // This triggers the browser to display the passkey / WebAuthn modal (e.g. Face ID, Touch ID, Windows Hello).
            // A new attestation is created. This also means a new public-private-key pair is created.
            const attestationResponse = await navigator.credentials.create(options.publicKey);
            console.log('Attestation response:', attestationResponse);

            // Send attestationResponse back to server for verification and storage.
            const verificationResponse = await fetch('/api/passkey/registerFinish', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Session-Key': response.headers.get('Session-Key')
                },
                body: JSON.stringify(attestationResponse)
            });


            const msg = await verificationResponse.json();
            if (verificationResponse.ok) {
                showMessage(msg, false);
            } else {
                showMessage(msg, true);
            }
        } catch(error) {
            showMessage('Error: ' + error.message, true);
        }
    }
}
