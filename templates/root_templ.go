// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/pynezz/pynezz_com/templates/layout"
)

func js() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_js_f58c`,
		Function: `function __templ_js_f58c(){document.addEventListener("DOMContentLoaded", ready);

    function visit(url) {
        window.location.href = url;
    }

    function ready() {
        var burger = document.getElementById("burger-dropdown");
        burger.onclick = toggleNav;

        var aboutBtn = document.getElementById("about-btn");
        if (aboutBtn) {
            aboutBtn.onclick = () => { visit("/about"); };
        }
    }
    function toggleNav() {
        var nav = document.getElementById("nav-bar-list");
        if (nav.classList.contains("hidden")) {
            nav.classList.remove("hidden");
        } else {
            nav.classList.add("hidden");
        }
    }
}`,
		Call:       templ.SafeScript(`__templ_js_f58c`),
		CallInline: templ.SafeScriptInline(`__templ_js_f58c`),
	}
}

// document.addEventListener("DOMContentLoaded", () => {
//     console.log("DOM loaded");
//     const dropdownToggle = document.getElementById('burger-dropdown');

//     // const headerElement = document.querySelector('header');
//     // const footerElement = document.querySelector('footer');
//     // const mainElement = document.querySelector("main");

//     const dropdownMenu = document.getElementById('burger-dropdown-menu');
//     // const toggleColor = document.querySelector('.theme-toggle__icon');
//     // const toggle = document.getElementById("dark-mode-toggle");

//     if (dropdownMenu && dropdownToggle) {
//         const showDropdown = () => {
//             dropdownMenu.classList.remove('opacity-0', 'invisible', '-translate-y-2');
//             dropdownMenu.classList.add('opacity-100', 'visible', 'translate-y-0');
//         };
//         const hideDropdown = () => {
//             dropdownMenu.classList.remove('opacity-100', 'visible', 'translate-y-0');
//             dropdownMenu.classList.add('opacity-0', 'invisible', '-translate-y-2');
//         };
//         dropdownToggle.addEventListener('mouseenter', showDropdown);
//         dropdownMenu.addEventListener('mouseenter', showDropdown);
//         dropdownToggle.addEventListener('mouseleave', hideDropdown);
//         dropdownMenu.addEventListener('mouseleave', hideDropdown);
//     }

//     if (mainElement) {
//         console.log("mainElement", mainElement);
//     } else {
//         console.log("mainElement not found");
//     }

//     if (localStorage.getItem("darkMode") === "disabled") {
//         if (mainElement) {
//             document.getElementById("dark-mode-toggle").checked = true;
//             mainElement.classList.add("frappe");
//             toggleColor.style.fill = 'yellow';
//         }
//     }

// if (toggle) {
//     toggle.addEventListener("change", function () {
//         if (mainElement) {
//             const darkModeDisabled = mainElement.classList.toggle("frappe");
//             headerElement.classList.toggle("frappe");
//             footerElement.classList.toggle("frappe");

//             if (darkModeDisabled) {
//                 localStorage.setItem("darkMode", "disabled");
//                 toggleColor.style.fill = 'yellow';
//             } else {
//                 localStorage.removeItem("darkMode");
//                 toggleColor.style.fill = 'blue';
//                 console.log(toggleColor)
//             }
//         }
//     });
// }
// });

func Root(content templ.Component, path ...string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = layout.Links().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<body class=\"min-h-screen flex flex-col\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = layout.Header(path...).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<main class=\"flex-grow container mx-auto\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</main>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = layout.Footer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = js().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
