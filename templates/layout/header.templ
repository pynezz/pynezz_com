package layout

import "strings"

// const desc = "A meta blog (blog about building a blog) as well as a blog about programming, technology, and information security."
// const baseUrl = "https://beta.pynezz.dev"
// const img = "https://beta.pynezz.dev/static/img/t_isometric_xs.png"
templ Links() {
	<head>
		<title>pynezz.dev</title>
		<meta charset="utf-8"/>
		<link rel="icon" href="/favicon.ico" type="image/x-icon"/>
		<!-- Primary Meta Tags -->
		<meta property="og:title" content="pynezz.dev"/>
		<meta property="og:description" content="A meta blog (blog about building a blog) as well as a blog about programming, technology, and information security."/>
		<meta property="og:image" content="https://beta.pynezz.dev/static/img/t_isometric_xs.png"/>
		<meta property="og:url" content="https://beta.pynezz.dev"/>
		<meta property="og:type" content="website"/>
		<meta property="og:site_name" content="pynezz.dev"/>
		<meta property="og:locale" content="en_US"/>
		<meta property="og:author" content="Kevin aka. pynezz"/>
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/>
		<link rel="stylesheet" href="/css/styles.css"/>
		<meta name="description" content="A meta blog (blog about building a blog from scratch) as well as a blog about programming, technology, and information security."/>
		<!-- Facebook Meta Tags -->
		<meta property="og:url" content="https://beta.pynezz.dev/"/>
		<meta property="og:type" content="website"/>
		<meta property="og:title" content="pynezz.dev tech blog"/>
		<meta property="og:description" content="A meta blog (blog about building a blog from scratch) as well as a blog about programming, technology, and information security."/>
		<meta property="og:image" content="https://beta.pynezz.dev/static/img/t_isometric_xs.png"/>
		<!-- Twitter Meta Tags -->
		<meta name="twitter:card" content="summary_large_image"/>
		<meta property="twitter:domain" content="beta.pynezz.dev"/>
		<meta property="twitter:url" content="https://beta.pynezz.dev/"/>
		<meta name="twitter:title" content="pynezz.dev tech blog"/>
		<meta name="twitter:description" content="A meta blog (blog about building a blog from scratch) as well as a blog about programming, technology, and information security."/>
		<meta name="twitter:image" content="https://beta.pynezz.dev/static/img/t_isometric_xs.png"/>
		<!-- Meta Tags Generated via https://www.opengraph.xyz -->
	</head>
}


// Tailwind styles
const headerStyle = "flex flex-row bg-crust items-center justify-between max-h-fit w-full max-w-full backdrop-blur-md ease-in-out	text-text"
const title = "text-lg font-mono text-text m-0 px-8"
const navBarItem = "li flex items-center justify-center h-12 px-4 text-text	"
const navBarItemLink = "text-text font-mono text-lg font-semibold"
const breadCrumb = "font-mono italic text-subtext1 p-sm hover:text-text px-0 mx-0"
const navBarList = "flex flex-row"
const burgerMenu = "lg:hidden flex items-center"
const navBarListResponsive = "hidden lg:flex flex-col lg:flex-row transition-transform duration-200 ease-in-out"
const navWrapper = "hidden sm:flex flex-col md:flex-row items-center justify-between sm:max-w-lg md:min-max-w mx-auto"

templ Header(path ...string) {
	<header class={ "header", headerStyle }>
		<div>
			<h3 class={ "h3", title }>
				<a href="/" class={ "a", navBarItemLink }>pynezz.dev</a>
			</h3>
		</div>
		<!-- Burger menu -->
		<button class={ "burger-menu", burgerMenu } onclick="toggleNav()">
			<!-- SVG for burger icon -->
			<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
			</svg>
		</button>
		<ul id="nav-bar-list" class={ "ul", navBarListResponsive }>
			<li class={ navBarItem }>
				<a href="/posts/" class={ "a", navBarItemLink }>posts</a>
			</li>
			<li class={ navBarItem }>
				<a href="/	tags/" class={ "a", navBarItemLink }>tags</a>
			</li>
			<div class="border-r border-mauve border-opacity-50 h-8 my-2"></div> <!-- Separator -->
			if len(path) > 4 {
				<li class={ "li", navBarItem }>
					<span class={ "a", navBarItemLink }>...</span>
				</li>
				for i, p := range path[len(path)-4:] {
					<li class={ navBarItem }>
						if i < len(path)-1 {
							<a href={ templ.SafeURL("/" + strings.Join(path[:len(path)-4+i], "/"+baseURL)) } class={ "a", breadCrumb }>{ p }</a>
						} else {
							<span class={ "a", navBarItemLink }>{ p }</span>
						}
					</li>
				}
			} else {
				for i, p := range path {
					<li class={ navBarItem }>
						if i < len(path)-1 {
							<a href={ templ.SafeURL("/" + strings.Join(path[:i], "/"+baseURL)) } class={ "a", breadCrumb }>{ p }</a>
						} else {
							<span class={ "a", navBarItemLink }>{ p }</span>
						}
					</li>
				}
			}
		</ul>
	</header>
}
