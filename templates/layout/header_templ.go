// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package layout

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func links(path string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<head><title>pynezz.dev</title><meta charset=\"utf-8\"><link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\"><meta og:title=\"pynezz.dev\"><meta og:description=\"A meta blog (blog about building a blog) as well as a blog about programming, technology, and information security.\"><meta og:image=\"https://pynezz.dev/img/og-image.png\"><meta og:url=\"https://pynezz.dev\"><meta og:type=\"website\"><meta og:site_name=\"pynezz.dev\"><meta og:locale=\"en_US\"><meta og:author=\"Kevin aka. pynezz\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if path == "/posts/" {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<link rel=\"stylesheet\" href=\"/css/post.css\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<link rel=\"stylesheet\" href=\"/css/styles.css\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</head>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func Header(path string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = links(path).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<ul class=\"main-nav\"><li class=\"nav-item\"><a href=\"/\" class=\"nav-link\">/</a></li><li class=\"nav-item\"><a href=\"/posts/\" class=\"nav-link\">posts</a></li></ul>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

//	templ Header(path string) {
//	  @links( path )
//	  <header class={"header", header()}>
//	  <div>
//	    <h3 class={"h3", title()}><a href="/" class={navBarItemLink("Hack Nerd Font Mono, monospace")}>pynezz.dev</a></h3>
//	  </div>
//	    <ul class={"ul", navBarList()}>
//			<li class={"li", navBarItem("left")}>
//				<a href="/" class={ navBarItemLink("Hack Nerd Font Mono, monospace")}>/</a>
//			</li>
//	    <li class={ navBarItem("left") }>
//	      <a href="/posts/" class={ navBarItemLink("Hack Nerd Font Mono") }>posts</a>
//	    </li>
//		</ul>
//	  </header>
//	}
func header() templ.CSSClass {
	templ_7745c5c3_CSSBuilder := templruntime.GetBuilder()
	templ_7745c5c3_CSSBuilder.WriteString(`display:flex;`)
	templ_7745c5c3_CSSBuilder.WriteString(`flex-direction:row;`)
	templ_7745c5c3_CSSBuilder.WriteString(string(templ.SanitizeCSS(`background-color`, crust)))
	templ_7745c5c3_CSSBuilder.WriteString(`align-items:center;`)
	templ_7745c5c3_CSSBuilder.WriteString(`justify-content:space-between;`)
	templ_7745c5c3_CSSBuilder.WriteString(`max-height:fit-content;`)
	templ_7745c5c3_CSSBuilder.WriteString(`width:100%;`)
	templ_7745c5c3_CSSBuilder.WriteString(`max-width:100%;`)
	templ_7745c5c3_CSSBuilder.WriteString(`float:top;`)
	templ_7745c5c3_CSSBuilder.WriteString(`z-index:1;`)
	templ_7745c5c3_CSSBuilder.WriteString(`backdrop-filter:blur(10px);`)
	templ_7745c5c3_CSSBuilder.WriteString(`-webkit-backdrop-filter:blur(10px);`)
	templ_7745c5c3_CSSID := templ.CSSID(`header`, templ_7745c5c3_CSSBuilder.String())
	return templ.ComponentCSSClass{
		ID:    templ_7745c5c3_CSSID,
		Class: templ.SafeCSS(`.` + templ_7745c5c3_CSSID + `{` + templ_7745c5c3_CSSBuilder.String() + `}`),
	}
}

// padding-left: 5em;
// margin-right: 5em;
func title() templ.CSSClass {
	templ_7745c5c3_CSSBuilder := templruntime.GetBuilder()
	templ_7745c5c3_CSSBuilder.WriteString(`font-size:1.35em;`)
	templ_7745c5c3_CSSBuilder.WriteString(`font-family:"Hack Nerd Font Mono", monospace;`)
	templ_7745c5c3_CSSBuilder.WriteString(string(templ.SanitizeCSS(`color`, txt)))
	templ_7745c5c3_CSSBuilder.WriteString(`margin:0;`)
	templ_7745c5c3_CSSBuilder.WriteString(`padding:0rem 2rem 0rem 2rem;`)
	templ_7745c5c3_CSSID := templ.CSSID(`title`, templ_7745c5c3_CSSBuilder.String())
	return templ.ComponentCSSClass{
		ID:    templ_7745c5c3_CSSID,
		Class: templ.SafeCSS(`.` + templ_7745c5c3_CSSID + `{` + templ_7745c5c3_CSSBuilder.String() + `}`),
	}
}
